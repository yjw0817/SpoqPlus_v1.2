# SPOQ Plus Kubernetes 배포 구성
---
apiVersion: v1
kind: Namespace
metadata:
  name: spoqplus

---
# ConfigMap - 애플리케이션 설정
apiVersion: v1
kind: ConfigMap
metadata:
  name: spoqplus-config
  namespace: spoqplus
data:
  APP_ENV: "production"
  APP_TIMEZONE: "Asia/Seoul"
  DB_DRIVER: "MySQLi"
  FACE_API_URL: "http://face-recognition-service:5001"
  SESSION_TIMEOUT: "7200"
  UPLOAD_MAX_SIZE: "10M"

---
# Secret - 민감한 정보
apiVersion: v1
kind: Secret
metadata:
  name: spoqplus-secrets
  namespace: spoqplus
type: Opaque
stringData:
  DB_HOST: "mysql-service"
  DB_USER: "spoqplus_app"
  DB_PASS: "changeme"
  DB_NAME: "spoqplus"
  ENCRYPTION_KEY: "changeme"
  JWT_SECRET: "changeme"

---
# PersistentVolumeClaim - 업로드 파일 저장소
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: uploads-pvc
  namespace: spoqplus
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: standard

---
# Deployment - 웹 애플리케이션
apiVersion: apps/v1
kind: Deployment
metadata:
  name: spoqplus-web
  namespace: spoqplus
  labels:
    app: spoqplus-web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: spoqplus-web
  template:
    metadata:
      labels:
        app: spoqplus-web
    spec:
      containers:
      - name: web
        image: spoqplus/web:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 80
        envFrom:
        - configMapRef:
            name: spoqplus-config
        - secretRef:
            name: spoqplus-secrets
        volumeMounts:
        - name: uploads
          mountPath: /var/www/html/public/uploads
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: uploads
        persistentVolumeClaim:
          claimName: uploads-pvc

---
# Deployment - Face Recognition Service
apiVersion: apps/v1
kind: Deployment
metadata:
  name: face-recognition
  namespace: spoqplus
  labels:
    app: face-recognition
spec:
  replicas: 2
  selector:
    matchLabels:
      app: face-recognition
  template:
    metadata:
      labels:
        app: face-recognition
    spec:
      containers:
      - name: face-api
        image: spoqplus/face-recognition:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 5001
        env:
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: spoqplus-secrets
              key: DB_HOST
        - name: DB_USER
          valueFrom:
            secretKeyRef:
              name: spoqplus-secrets
              key: DB_USER
        - name: DB_PASS
          valueFrom:
            secretKeyRef:
              name: spoqplus-secrets
              key: DB_PASS
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: spoqplus-secrets
              key: DB_NAME
        - name: FLASK_ENV
          value: "production"
        - name: SIMILARITY_THRESHOLD
          value: "0.85"
        - name: GLASSES_THRESHOLD
          value: "0.25"
        resources:
          requests:
            memory: "1Gi"
            cpu: "1000m"
          limits:
            memory: "2Gi"
            cpu: "2000m"
        livenessProbe:
          httpGet:
            path: /api/face/health
            port: 5001
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/face/health
            port: 5001
          initialDelaySeconds: 10
          periodSeconds: 5

---
# Service - 웹 애플리케이션
apiVersion: v1
kind: Service
metadata:
  name: spoqplus-web-service
  namespace: spoqplus
spec:
  selector:
    app: spoqplus-web
  ports:
  - protocol: TCP
    port: 80
    targetPort: 80
  type: ClusterIP

---
# Service - Face Recognition
apiVersion: v1
kind: Service
metadata:
  name: face-recognition-service
  namespace: spoqplus
spec:
  selector:
    app: face-recognition
  ports:
  - protocol: TCP
    port: 5001
    targetPort: 5001
  type: ClusterIP

---
# HorizontalPodAutoscaler - 웹 애플리케이션
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: spoqplus-web-hpa
  namespace: spoqplus
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: spoqplus-web
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80

---
# HorizontalPodAutoscaler - Face Recognition
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: face-recognition-hpa
  namespace: spoqplus
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: face-recognition
  minReplicas: 2
  maxReplicas: 5
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 60

---
# Ingress - 외부 접근 설정
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: spoqplus-ingress
  namespace: spoqplus
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "10m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "600"
    nginx.ingress.kubernetes.io/proxy-send-timeout: "600"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - spoqplus.example.com
    secretName: spoqplus-tls
  rules:
  - host: spoqplus.example.com
    http:
      paths:
      - path: /api/face
        pathType: Prefix
        backend:
          service:
            name: face-recognition-service
            port:
              number: 5001
      - path: /
        pathType: Prefix
        backend:
          service:
            name: spoqplus-web-service
            port:
              number: 80

---
# NetworkPolicy - 네트워크 보안 규칙
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: spoqplus-network-policy
  namespace: spoqplus
spec:
  podSelector:
    matchLabels:
      app: spoqplus-web
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - podSelector:
        matchLabels:
          app: nginx-ingress
    ports:
    - protocol: TCP
      port: 80
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: mysql
    ports:
    - protocol: TCP
      port: 3306
  - to:
    - podSelector:
        matchLabels:
          app: face-recognition
    ports:
    - protocol: TCP
      port: 5001
  - ports:
    - protocol: TCP
      port: 53
    - protocol: UDP
      port: 53

---
# PodDisruptionBudget - 고가용성 보장
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: spoqplus-web-pdb
  namespace: spoqplus
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: spoqplus-web

---
# PodDisruptionBudget - Face Recognition
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: face-recognition-pdb
  namespace: spoqplus
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: face-recognition